// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace ppx
{

using global::System;
using global::FlatBuffers;

public struct Beta : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static Beta GetRootAsBeta(ByteBuffer _bb) { return GetRootAsBeta(_bb, new Beta()); }
  public static Beta GetRootAsBeta(ByteBuffer _bb, Beta obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public Beta __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public Tensor? Concentration0 { get { int o = __p.__offset(4); return o != 0 ? (Tensor?)(new Tensor()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  public Tensor? Concentration1 { get { int o = __p.__offset(6); return o != 0 ? (Tensor?)(new Tensor()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }

  public static Offset<Beta> CreateBeta(FlatBufferBuilder builder,
      Offset<Tensor> concentration0Offset = default(Offset<Tensor>),
      Offset<Tensor> concentration1Offset = default(Offset<Tensor>)) {
    builder.StartObject(2);
    Beta.AddConcentration1(builder, concentration1Offset);
    Beta.AddConcentration0(builder, concentration0Offset);
    return Beta.EndBeta(builder);
  }

  public static void StartBeta(FlatBufferBuilder builder) { builder.StartObject(2); }
  public static void AddConcentration0(FlatBufferBuilder builder, Offset<Tensor> concentration0Offset) { builder.AddOffset(0, concentration0Offset.Value, 0); }
  public static void AddConcentration1(FlatBufferBuilder builder, Offset<Tensor> concentration1Offset) { builder.AddOffset(1, concentration1Offset.Value, 0); }
  public static Offset<Beta> EndBeta(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<Beta>(o);
  }
};


}
