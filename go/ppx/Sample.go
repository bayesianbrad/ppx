// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package ppx

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type Sample struct {
	_tab flatbuffers.Table
}

func GetRootAsSample(buf []byte, offset flatbuffers.UOffsetT) *Sample {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &Sample{}
	x.Init(buf, n+offset)
	return x
}

func (rcv *Sample) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *Sample) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *Sample) Address() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *Sample) Name() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *Sample) DistributionType() byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetByte(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *Sample) MutateDistributionType(n byte) bool {
	return rcv._tab.MutateByteSlot(8, n)
}

func (rcv *Sample) Distribution(obj *flatbuffers.Table) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		rcv._tab.Union(obj, o)
		return true
	}
	return false
}

func (rcv *Sample) Control() byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.GetByte(o + rcv._tab.Pos)
	}
	return 1
}

func (rcv *Sample) MutateControl(n byte) bool {
	return rcv._tab.MutateByteSlot(12, n)
}

func (rcv *Sample) Replace() byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.GetByte(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *Sample) MutateReplace(n byte) bool {
	return rcv._tab.MutateByteSlot(14, n)
}

func SampleStart(builder *flatbuffers.Builder) {
	builder.StartObject(6)
}
func SampleAddAddress(builder *flatbuffers.Builder, address flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(address), 0)
}
func SampleAddName(builder *flatbuffers.Builder, name flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(name), 0)
}
func SampleAddDistributionType(builder *flatbuffers.Builder, distributionType byte) {
	builder.PrependByteSlot(2, distributionType, 0)
}
func SampleAddDistribution(builder *flatbuffers.Builder, distribution flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(distribution), 0)
}
func SampleAddControl(builder *flatbuffers.Builder, control byte) {
	builder.PrependByteSlot(4, control, 1)
}
func SampleAddReplace(builder *flatbuffers.Builder, replace byte) {
	builder.PrependByteSlot(5, replace, 0)
}
func SampleEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
