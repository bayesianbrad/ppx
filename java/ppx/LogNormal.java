// automatically generated by the FlatBuffers compiler, do not modify

package ppx;

import java.nio.*;
import java.lang.*;
import java.util.*;
import com.google.flatbuffers.*;

@SuppressWarnings("unused")
public final class LogNormal extends Table {
  public static LogNormal getRootAsLogNormal(ByteBuffer _bb) { return getRootAsLogNormal(_bb, new LogNormal()); }
  public static LogNormal getRootAsLogNormal(ByteBuffer _bb, LogNormal obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { bb_pos = _i; bb = _bb; vtable_start = bb_pos - bb.getInt(bb_pos); vtable_size = bb.getShort(vtable_start); }
  public LogNormal __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public Tensor mean() { return mean(new Tensor()); }
  public Tensor mean(Tensor obj) { int o = __offset(4); return o != 0 ? obj.__assign(__indirect(o + bb_pos), bb) : null; }
  public Tensor stddev() { return stddev(new Tensor()); }
  public Tensor stddev(Tensor obj) { int o = __offset(6); return o != 0 ? obj.__assign(__indirect(o + bb_pos), bb) : null; }

  public static int createLogNormal(FlatBufferBuilder builder,
      int meanOffset,
      int stddevOffset) {
    builder.startObject(2);
    LogNormal.addStddev(builder, stddevOffset);
    LogNormal.addMean(builder, meanOffset);
    return LogNormal.endLogNormal(builder);
  }

  public static void startLogNormal(FlatBufferBuilder builder) { builder.startObject(2); }
  public static void addMean(FlatBufferBuilder builder, int meanOffset) { builder.addOffset(0, meanOffset, 0); }
  public static void addStddev(FlatBufferBuilder builder, int stddevOffset) { builder.addOffset(1, stddevOffset, 0); }
  public static int endLogNormal(FlatBufferBuilder builder) {
    int o = builder.endObject();
    return o;
  }
}

