// automatically generated by the FlatBuffers compiler, do not modify

package ppx;

import java.nio.*;
import java.lang.*;
import java.util.*;
import com.google.flatbuffers.*;

@SuppressWarnings("unused")
public final class Weibull extends Table {
  public static Weibull getRootAsWeibull(ByteBuffer _bb) { return getRootAsWeibull(_bb, new Weibull()); }
  public static Weibull getRootAsWeibull(ByteBuffer _bb, Weibull obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { bb_pos = _i; bb = _bb; vtable_start = bb_pos - bb.getInt(bb_pos); vtable_size = bb.getShort(vtable_start); }
  public Weibull __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public Tensor scale() { return scale(new Tensor()); }
  public Tensor scale(Tensor obj) { int o = __offset(4); return o != 0 ? obj.__assign(__indirect(o + bb_pos), bb) : null; }
  public Tensor concetration() { return concetration(new Tensor()); }
  public Tensor concetration(Tensor obj) { int o = __offset(6); return o != 0 ? obj.__assign(__indirect(o + bb_pos), bb) : null; }

  public static int createWeibull(FlatBufferBuilder builder,
      int scaleOffset,
      int concetrationOffset) {
    builder.startObject(2);
    Weibull.addConcetration(builder, concetrationOffset);
    Weibull.addScale(builder, scaleOffset);
    return Weibull.endWeibull(builder);
  }

  public static void startWeibull(FlatBufferBuilder builder) { builder.startObject(2); }
  public static void addScale(FlatBufferBuilder builder, int scaleOffset) { builder.addOffset(0, scaleOffset, 0); }
  public static void addConcetration(FlatBufferBuilder builder, int concetrationOffset) { builder.addOffset(1, concetrationOffset, 0); }
  public static int endWeibull(FlatBufferBuilder builder) {
    int o = builder.endObject();
    return o;
  }
}

