<?php
// automatically generated by the FlatBuffers compiler, do not modify

namespace ppx;

use \Google\FlatBuffers\Struct;
use \Google\FlatBuffers\Table;
use \Google\FlatBuffers\ByteBuffer;
use \Google\FlatBuffers\FlatBufferBuilder;

class Exponential extends Table
{
    /**
     * @param ByteBuffer $bb
     * @return Exponential
     */
    public static function getRootAsExponential(ByteBuffer $bb)
    {
        $obj = new Exponential();
        return ($obj->init($bb->getInt($bb->getPosition()) + $bb->getPosition(), $bb));
    }

    public static function ExponentialIdentifier()
    {
        return "PPXF";
    }

    public static function ExponentialBufferHasIdentifier(ByteBuffer $buf)
    {
        return self::__has_identifier($buf, self::ExponentialIdentifier());
    }

    /**
     * @param int $_i offset
     * @param ByteBuffer $_bb
     * @return Exponential
     **/
    public function init($_i, ByteBuffer $_bb)
    {
        $this->bb_pos = $_i;
        $this->bb = $_bb;
        return $this;
    }

    public function getRate()
    {
        $obj = new Tensor();
        $o = $this->__offset(4);
        return $o != 0 ? $obj->init($this->__indirect($o + $this->bb_pos), $this->bb) : 0;
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return void
     */
    public static function startExponential(FlatBufferBuilder $builder)
    {
        $builder->StartObject(1);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return Exponential
     */
    public static function createExponential(FlatBufferBuilder $builder, $rate)
    {
        $builder->startObject(1);
        self::addRate($builder, $rate);
        $o = $builder->endObject();
        return $o;
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addRate(FlatBufferBuilder $builder, $rate)
    {
        $builder->addOffsetX(0, $rate, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return int table offset
     */
    public static function endExponential(FlatBufferBuilder $builder)
    {
        $o = $builder->endObject();
        return $o;
    }
}
